name: CI & CD

# Reference:
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
on: [push, pull_request]

env:
  docker_image_name: rbonghi/jetson_stats

# Reference
# https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions

jobs:
  auto_style:
    name: Auto style code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install autopep8
        run: |
          python -m pip install --upgrade pip
          pip install flake8 autopep8
      - name: Auto style code with autopep8
        run: autopep8 --in-place --aggressive --aggressive --recursive . --max-line-length 180
      - name: Check for changes
        run: |
          if [[ `git status --porcelain` ]]; then
            echo "There are changes after auto-styling the code."
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Auto style code with autopep8"
            git push
          else
            echo "No changes detected."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
  build:
    name: Test on python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: [auto_style]
    strategy:
      matrix:
        # Updated Python versions to match tox.ini
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - run: echo "Branch $GITHUB_REF"
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          # Make group jtop
          sudo groupadd jtop
          # Upgrade pip
          sudo -H env "PATH=$PATH" python -m pip install --upgrade pip
          # Install tox
          sudo -H env "PATH=$PATH" pip install tox
      - name: Display Python version
        run: sudo env "PATH=$PATH" python -c "import sys; print(sys.version)"
      - name: Test with tox
        run: |
          sudo env "PATH=$PATH" tox -e py${{ matrix.python-version }}

  docker:
    name: "Build Docker image develop"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.docker_image_name }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=ref,event=tag
            type=ref,event=pr
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: |
          github.actor != 'dependabot[bot]' &&
          github.event_name != 'pull_request' &&
          !startsWith(github.ref, 'refs/heads/feature/') &&
          !contains(github.ref, '.dev') &&
          !contains(github.ref, 'rc')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          push: |
            ${{ github.actor != 'dependabot[bot]' &&
                github.event_name != 'pull_request' &&
                !startsWith(github.ref, 'refs/heads/feature/') &&
                !contains(github.ref, '.dev') &&
                !contains(github.ref, 'rc')
            }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64, linux/arm64

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Build sphinx
        run: |
          pip install -e .[docs]
          cd docs
          sphinx-build -b html -W . _build/html
      - name: Export website
        id: export_website
        if: ${{ !startsWith(github.ref, 'refs/heads/master') }}
        uses: actions/upload-artifact@v4
        with:
          name: html
          path: docs/_build/html
      - name: Deploy on branch
        if: startsWith(github.ref, 'refs/heads/master') || (startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '.dev') && !contains(github.ref, 'rc'))
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          branch: gh-pages
          folder: docs/_build/html

  update_docker_description:
    name: Update docker description
    if: startsWith(github.ref, 'refs/heads/master') || (startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '.dev') && !contains(github.ref, 'rc'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: rbonghi/jetson_stats
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md

  deploy:
    name: Deploy on PIP
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          pip install build twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m build
          twine upload dist/*

  notify:
    name: "Notify socials"
    needs: [deploy, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Repository status
        id: repo_status
        shell: bash
        run: |
          if ${{ startsWith(github.ref, 'refs/tags/') }} ; then
            TAG_RELEASE=${GITHUB_REF/refs\/tags\//}
          else
            TAG_RELEASE=${GITHUB_REF/refs\/heads\//}
          fi
          echo "tag=${TAG_RELEASE}" >> $GITHUB_OUTPUT
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "jetson-stats **${{ steps.repo_status.outputs.tag }}** has been deployed!\nTo install `sudo pip3 install jetson-stats==${{ steps.repo_status.outputs.tag }}`"
      - name: Send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            jetson-stats **${{ steps.repo_status.outputs.tag }}** has been deployed!

            See changes: https://github.com/${{ github.repository }}/releases/latest
